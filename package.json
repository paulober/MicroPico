{
  "name": "pico-w-go",
  "displayName": "MicroPico",
  "description": "Auto-completion, remote workspace and a REPL console integration for the Raspberry Pi Pico (W) with MicroPython firmware.",
  "version": "3.8.4",
  "publisher": "paulober",
  "license": "MPL-2.0",
  "homepage": "https://github.com/paulober/MicroPico/blob/main/README.md",
  "bugs": {
    "url": "https://github.com/paulober/MicroPico/issues"
  },
  "repository": {
    "type": "git",
    "url": "git+https://github.com/paulober/MicroPico.git"
  },
  "icon": "images/logo-256.png",
  "galleryBanner": {
    "color": "#5666c6",
    "theme": "dark"
  },
  "markdown": "github",
  "engines": {
    "vscode": "^1.92.1",
    "node": ">=20.14.0"
  },
  "keywords": [
    "raspberry",
    "pi",
    "pico",
    "pico w",
    "raspberry pi pico",
    "raspberry pi pico w",
    "micropython",
    "pico-w-go"
  ],
  "categories": [
    "Other"
  ],
  "capabilities": {
    "virtualWorkspaces": {
      "supported": "limited",
      "description": "MicroPico does not support as first workspace a virtual one but contributes a virtual workspace for the Pico (W)."
    },
    "untrustedWorkspaces": {
      "supported": false,
      "description": "Why would you want to use MicroPico in an untrusted workspace?"
    }
  },
  "activationEvents": [
    "workspaceContains:.picowgo",
    "workspaceContains:.micropico",
    "onFileSystem:pico"
  ],
  "main": "./dist/extension.cjs",
  "os": [
    "win32",
    "darwin",
    "linux"
  ],
  "cpu": [
    "x64",
    "arm64",
    "arm"
  ],
  "minimumNodeVersion": 20,
  "contributes": {
    "commands": [
      {
        "command": "micropico.connect",
        "title": "Connect",
        "category": "MicroPico"
      },
      {
        "command": "micropico.disconnect",
        "title": "Disconnect",
        "category": "MicroPico"
      },
      {
        "command": "micropico.initialise",
        "title": "Configure project",
        "category": "MicroPico"
      },
      {
        "command": "micropico.upload",
        "title": "Upload project to Pico",
        "enablement": "micropico.isConnected && (resourceScheme != pico && isFileSystemResource) || inQuickOpen",
        "category": "MicroPico"
      },
      {
        "command": "micropico.uploadFile",
        "title": "Upload current file to Pico",
        "enablement": "micropico.isConnected && resourceScheme != pico && isFileSystemResource",
        "category": "MicroPico"
      },
      {
        "command": "micropico.download",
        "title": "Download project from Pico",
        "enablement": "(resourceScheme == pico && isFileSystemResource) || inQuickOpen",
        "category": "MicroPico"
      },
      {
        "command": "micropico.run",
        "title": "Run current file on Pico",
        "enablement": "micropico.isConnected && resourceScheme != pico && isFileSystemResource && resourceExtname == .py",
        "category": "MicroPico"
      },
      {
        "command": "micropico.remote.run",
        "title": "Remote > Run current file on Pico",
        "enablement": "resourceScheme == pico && isFileSystemResource && resourceExtname == .py",
        "category": "MicroPico"
      },
      {
        "command": "micropico.universalStop",
        "title": "Stop execution",
        "category": "MicroPico"
      },
      {
        "command": "micropico.runselection",
        "title": "Run current selection on Pico",
        "enablement": "micropico.isConnected && !inQuickOpen && !listFocus && editorLangId == python",
        "category": "MicroPico"
      },
      {
        "command": "micropico.deleteAllFiles",
        "title": "Delete all files from board",
        "category": "MicroPico"
      },
      {
        "command": "micropico.globalSettings",
        "title": "Global settings",
        "category": "MicroPico"
      },
      {
        "command": "micropico.workspaceSettings",
        "title": "Workspace settings",
        "category": "MicroPico"
      },
      {
        "command": "micropico.reset.soft",
        "title": "Reset > Soft",
        "category": "MicroPico"
      },
      {
        "command": "micropico.reset.hard",
        "title": "Reset > Hard",
        "category": "MicroPico"
      },
      {
        "command": "micropico.help",
        "title": "Help > Getting started",
        "category": "MicroPico"
      },
      {
        "command": "micropico.extra.pins",
        "title": "Help > Show Pico Pin Map",
        "category": "MicroPico"
      },
      {
        "command": "micropico.extra.getSerial",
        "title": "Help > List serial ports",
        "category": "MicroPico"
      },
      {
        "command": "micropico.extra.firmwareUpdates",
        "title": "Help > Check for firmware updates",
        "category": "MicroPico"
      },
      {
        "command": "micropico.extra.switchStubs",
        "title": "Extra > Switch stubs",
        "category": "MicroPico"
      },
      {
        "command": "micropico.listCommands",
        "title": "List all Commands",
        "category": "MicroPico"
      },
      {
        "command": "micropico.toggleFileSystem",
        "title": "Toggle Virtual File System (reloads UI and closes existing vREPLs)",
        "category": "MicroPico"
      },
      {
        "command": "micropico.switchPico",
        "title": "Switch Pico",
        "category": "MicroPico"
      },
      {
        "command": "micropico.reset.soft.listen",
        "title": "Reset > Soft (listen)",
        "category": "MicroPico"
      },
      {
        "command": "micropico.rtc.sync",
        "title": "Sync RTC",
        "category": "MicroPico"
      },
      {
        "command": "micropico.device-wifi.itemClicked",
        "title": "Wifi > Connect",
        "category": "MicroPico"
      },
      {
        "command": "micropico.device-wifi.refresh",
        "title": "Scan",
        "icon": {
          "dark": "images/refresh-dark.svg",
          "light": "images/refresh-light.svg"
        },
        "enablement": "view == micropico-device-wifi"
      }
    ],
    "menus": {
      "explorer/context": [
        {
          "command": "micropico.upload",
          "group": "micropico",
          "when": "micropico.isActivated && resourceScheme != pico"
        },
        {
          "command": "micropico.uploadFile",
          "group": "micropico",
          "when": "micropico.isActivated && resourceScheme != pico"
        },
        {
          "command": "micropico.download",
          "group": "micropico",
          "when": "micropico.isActivated && resourceScheme == pico"
        },
        {
          "command": "micropico.run",
          "group": "micropico",
          "when": "micropico.isActivated && resourceScheme != pico && isFileSystemResource && resourceExtname == .py"
        },
        {
          "command": "micropico.remote.run",
          "group": "micropico",
          "when": "micropico.isActivated && resourceScheme == pico && isFileSystemResource && resourceExtname == .py"
        }
      ],
      "editor/context": [
        {
          "command": "micropico.run",
          "group": "micropico",
          "when": "micropico.isActivated && resourceScheme != pico && isFileSystemResource && resourceExtname == .py && editorLangId == python"
        },
        {
          "command": "micropico.remote.run",
          "group": "micropico",
          "when": "micropico.isActivated && resourceScheme == pico && isFileSystemResource && resourceExtname == .py && editorLangId == python"
        },
        {
          "command": "micropico.runselection",
          "group": "micropico",
          "when": "micropico.isActivated"
        },
        {
          "command": "micropico.uploadFile",
          "group": "micropico",
          "when": "micropico.isActivated && resourceScheme != pico && isFileSystemResource"
        }
      ],
      "editor/title": [
        {
          "command": "micropico.run",
          "group": "micropico",
          "when": "micropico.isActivated && resourceScheme != pico && isFileSystemResource && resourceExtname == .py && editorLangId == python"
        },
        {
          "command": "micropico.remote.run",
          "group": "micropico",
          "when": "micropico.isActivated && resourceScheme == pico && isFileSystemResource && resourceExtname == .py && editorLangId == python"
        },
        {
          "command": "micropico.upload",
          "group": "micropico",
          "when": "micropico.isActivated && resourceScheme != pico"
        },
        {
          "command": "micropico.download",
          "group": "micropico",
          "when": "micropico.isActivated && resourceScheme == pico"
        }
      ],
      "view/title": [
        {
          "command": "micropico.device-wifi.refresh",
          "when": "view == micropico-device-wifi",
          "group": "navigation@0"
        }
      ]
    },
    "configuration": {
      "title": "MicroPico",
      "properties": {
        "micropico.autoConnect": {
          "type": "boolean",
          "scope": "resource",
          "default": true,
          "title": "Autoconnect on USB",
          "description": "Ignores any 'device address' setting and automatically connects to the top item in the serialport list.",
          "order": 2
        },
        "micropico.manualComDevice": {
          "type": "string",
          "scope": "resource",
          "default": "",
          "title": "Manual COM device",
          "description": "If autoConnect is set to false MicroPico will automatically connect to the serial port specified here.",
          "order": 3
        },
        "micropico.syncFolder": {
          "type": "string",
          "scope": "resource",
          "default": "",
          "title": "Sync Folder",
          "description": "This folder will be uploaded to the pyboard when using the sync button. Leave empty to sync the complete project. (only allows folders within the project). Use a path relative to the project you opened in vscode, without leading or trailing slash",
          "order": 4
        },
        "micropico.additionalSyncFolders": {
          "type": "array",
          "scope": "resource",
          "items": {
            "type": "string",
            "uniqueItems": true
          },
          "default": [],
          "title": "Additional Sync Folders",
          "description": "Specifies additional folders that can be selected as upload sources when uploading a project. If left empty, the sync will be performed based on the folder specified in the 'syncFolder' setting. Only folders within the project are allowed. Specify the path relative to the project you have opened in Visual Studio Code, without a leading or trailing slash.",
          "order": 5
        },
        "micropico.syncAllFileTypes": {
          "type": "boolean",
          "default": false,
          "scope": "resource",
          "title": "Upload all file types",
          "description": "If enabled, all files will be uploaded no matter the file type. The list of file types below will be ignored",
          "order": 6
        },
        "micropico.syncFileTypes": {
          "type": "array",
          "scope": "resource",
          "items": {
            "type": "string",
            "uniqueItems": true
          },
          "default": [
            "py",
            "txt",
            "log",
            "json",
            "xml",
            "html",
            "js",
            "css",
            "mpy"
          ],
          "title": "Upload file types",
          "description": "All types of files that will be uploaded to the board, seperated by comma. All other filetypes will be ignored during an upload (or download) action",
          "order": 7
        },
        "micropico.pyIgnore": {
          "title": "Pyignore list",
          "scope": "resource",
          "markdownDescription": "Comma separated list of files and folders to ignore when uploading relative to syncFolder (no wildcard or regular expressions supported except `**/<file/folder>` to exclude an item by its name in every sub folder). Use `<additionalSyncFolder>:file/to/exclude.py` to create sync folder exclusive exclusion rules (all other rules will always be applied relative to the selected sync folder). Replace `additionalSyncFolder` with a value from your `micropico.additionalSyncFolders` setting or the value from `micropico.syncFolder`.",
          "type": "array",
          "items": {
            "type": "string"
          },
          "default": [
            "**/.picowgo",
            "**/.micropico",
            "**/.vscode",
            "**/.gitignore",
            "**/.git",
            "**/.DS_Store",
            "**/project.pico-go",
            "**/env",
            "**/venv",
            "**/.venv",
            "**/.idea"
          ],
          "order": 8
        },
        "micropico.openOnStart": {
          "type": "boolean",
          "default": false,
          "scope": "machine-overridable",
          "title": "Open on start",
          "description": "Automatically open the MicroPico vREPL after starting VS Code. Could cause random terminal freezes on Linux.",
          "order": 9
        },
        "micropico.statusbarButtons": {
          "type": "array",
          "title": "Statusbar buttons",
          "scope": "resource",
          "description": "Select which buttons to show in the statusbar",
          "items": {
            "type": "string",
            "uniqueItems": true,
            "enum": [
              "status",
              "stop",
              "run",
              "runselection",
              "upload",
              "download",
              "disconnect",
              "softreset",
              "settings",
              "listserial",
              "listcommands",
              "togglepicowfs",
              "uploadproject"
            ]
          },
          "default": [
            "status",
            "run",
            "softreset",
            "togglepicowfs"
          ],
          "order": 10
        },
        "micropico.gcBeforeUpload": {
          "type": "boolean",
          "default": true,
          "scope": "machine-overridable",
          "title": "Garbage collection before upload",
          "description": "Run garbage collection before uploading files to the board. This will free up some memory usefull when uploading large files but adds about a second or two to the upload process.",
          "order": 11
        },
        "micropico.softResetAfterUpload": {
          "type": "boolean",
          "default": false,
          "scope": "resource",
          "title": "Soft-reset after upload",
          "description": "Soft-resets your board after any upload action which also reruns main.py and boot.py. Usefull when working with main.py and boot.py.",
          "order": 12
        },
        "micropico.executeOnConnect": {
          "type": "string",
          "default": "",
          "scope": "resource",
          "title": "Script to execute on connect",
          "description": "Path to a MicroPython script on the Pico to execute on connect. Leave empty to disable.",
          "order": 13
        },
        "micropico.importOnConnect": {
          "type": "string",
          "default": "",
          "scope": "resource",
          "title": "MicroPython module to import on connect",
          "description": "A MicroPython module to import in vREPL on connect. Leave empty to disable.",
          "order": 14
        }
      }
    },
    "terminal": {
      "profiles": [
        {
          "title": "Pico (W) vREPL",
          "id": "micropico.vrepl"
        }
      ]
    },
    "viewsContainers": {
      "activitybar": [
        {
          "id": "micropico-device-controller",
          "title": "MicroPico Device Controller (experimental)",
          "icon": "images/logo-black.png"
        }
      ]
    },
    "views": {
      "micropico-device-controller": [
        {
          "id": "micropico-device-wifi",
          "name": "Wifi (Pico-W only)",
          "type": "tree"
        },
        {
          "id": "micropico-device-packages",
          "name": "Packages (Pico-W only)",
          "type": "webview"
        }
      ]
    }
  },
  "statusBar": [
    {
      "key": "status",
      "name": "",
      "command": "micropico.toggleConnect",
      "tooltip": "Toggle board connection"
    },
    {
      "key": "stop",
      "name": "$(primitive-square) Stop",
      "command": "micropico.universalStop",
      "tooltip": "Stop"
    },
    {
      "key": "run",
      "name": "$(play) Run",
      "command": "micropico.run",
      "tooltip": "Run current file"
    },
    {
      "key": "runselection",
      "name": "$(play) Run Line",
      "command": "micropico.runselection",
      "tooltip": "Run current line"
    },
    {
      "key": "upload",
      "name": "$(triangle-up) Upload",
      "command": "micropico.uploadFile",
      "tooltip": "Upload current file to your board"
    },
    {
      "key": "uploadproject",
      "name": "$(triangle-up) Upload Project",
      "command": "micropico.upload",
      "tooltip": "Upload current project to your board"
    },
    {
      "key": "download",
      "name": "$(triangle-down) Download",
      "command": "micropico.download",
      "tooltip": "Download project from your board. This will overwrite all files in the sync folder."
    },
    {
      "key": "disconnect",
      "name": "$(chrome-close) Disconnect",
      "command": "micropico.disconnect",
      "tooltip": "Disconnect"
    },
    {
      "key": "softreset",
      "name": "$(refresh) Reset",
      "command": "micropico.reset.soft",
      "tooltip": "Restart your board"
    },
    {
      "key": "settings",
      "name": "$(gear) Settings",
      "command": "micropico.globalSettings",
      "tooltip": "Global MicroPico settings"
    },
    {
      "key": "listserial",
      "name": "$(list-unordered) List serialports",
      "command": "micropico.extra.getSerial",
      "tooltip": "List available serialports"
    },
    {
      "key": "listcommands",
      "name": "$(list-unordered) All commands",
      "command": "micropico.listCommands",
      "tooltip": "List all available MicroPico commands"
    },
    {
      "key": "togglepicowfs",
      "name": "$(list-tree) Toggle Pico-W-FS",
      "command": "micropico.toggleFileSystem",
      "tooltip": "Toggle virtual Pico (W) workspace"
    }
  ],
  "scripts": {
    "vscode:uninstall": "node ./dist/vscodeUninstall.mjs",
    "vscode:prepublish": "npm run package",
    "postinstall": "python3 -m pip install -U micropython-rp2-rpi_pico_w-stubs==1.23.* --target ./mpy_stubs --no-user",
    "compile-uninstaller": "rollup -c uninstall.rollup.config.mjs",
    "compile": "rollup -c && npm run compile-uninstaller",
    "watch": "rollup -cw",
    "package": "rollup -c --environment BUILD:production --sourcemap hidden && npm run compile-uninstaller",
    "compile-tests": "tsc -p . --outDir out",
    "watch-tests": "tsc -p . -w --outDir out",
    "pretest": "npm run compile-tests && npm run compile && npm run lint",
    "lint": "eslint src --ext ts",
    "test": "node ./out/test/runTest.js"
  },
  "devDependencies": {
    "@rollup/plugin-commonjs": "^26.0.1",
    "@rollup/plugin-json": "^6.1.0",
    "@rollup/plugin-node-resolve": "^15.2.3",
    "@rollup/plugin-terser": "^0.4.4",
    "@rollup/plugin-typescript": "^11.1.6",
    "@types/fs-extra": "^11.0.4",
    "@types/lodash": "^4.17.7",
    "@types/mocha": "^10.0.7",
    "@types/node": "^20.14.x",
    "@types/uuid": "^10.0.0",
    "@types/vscode": "^1.92.0",
    "@types/which": "^3.0.4",
    "@typescript-eslint/eslint-plugin": "^7.13.1",
    "@typescript-eslint/parser": "^7.13.1",
    "@vscode/test-electron": "^2.4.1",
    "eslint": "^8.57.0",
    "eslint-config-prettier": "^9.1.0",
    "glob": "^9.3.4",
    "mocha": "^10.7.3",
    "rollup": "^4.20.0",
    "rollup-plugin-copy": "^3.5.0",
    "typescript": "^5.5.4"
  },
  "dependencies": {
    "@paulober/pyboard-serial-com": "^3.1.2",
    "axios": "^1.7.4",
    "fs-extra": "^11.2.0",
    "lodash": "^4.17.21",
    "rimraf": "^6.0.1",
    "uuid": "^10.0.0",
    "which": "^4.0.0"
  }
}
